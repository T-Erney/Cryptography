#include <iostream>
#include <iomanip>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

uint8_t gf_add(uint8_t a, uint8_t b) {
  return a ^ b;
}

uint8_t gf_mul(uint8_t a, uint8_t b) {
  uint8_t res = 0;

  for (; b; b >>= 1) {
    if (0x01 & b) res ^= a;
    if (0x80 & a) a = (a << 1) ^ 0b11011;
    else a <<= 1;
  }

  return res;
}

uint64_t sbox[] = {
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

uint64_t sboxInv[] = {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

uint8_t rcon[] = {
  0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
  0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
  0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
  0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
  0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
  0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
  0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
  0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
  0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
  0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
  0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
  0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
  0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
  0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
  0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
  0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
};

struct Mat44 {
  uint8_t data[4][4];
};

void mat44_print(Mat44* m) {
  for (int i = 0; i < 4; i += 1) {
    std::cout << std::hex << "| ";
    for (int j = 0; j < 4; j += 1) {
      std::cout << std::setw(3) << (uint32_t)m->data[i][j] << " ";
    }
    std::cout << "|\n" << std::dec;
  }
  std::cout << "\n";
}

Mat44* mat44_set(const uint8_t (&a)[4], const uint8_t (&b)[4], const uint8_t (&c)[4], const uint8_t (&d)[4]) {
  Mat44* m = (Mat44*)malloc(sizeof(Mat44));
  memcpy(m->data[0], a, sizeof(uint8_t) * 4);
  memcpy(m->data[1], b, sizeof(uint8_t) * 4);
  memcpy(m->data[2], c, sizeof(uint8_t) * 4);
  memcpy(m->data[3], d, sizeof(uint8_t) * 4);
  return m;
}

// SubByte Layer
Mat44* sub_byte(Mat44* m) {
  Mat44* bs_mat = NULL;

  uint8_t data[4][4] = {{0}, {0}, {0}, {0}};
  for (uint32_t i = 0; i < 4; i += 1) {
    for (uint32_t j = 0; j < 4; j += 1) {
      uint8_t a = 0x0f & m->data[i][j] >> 4,
              b = 0x0f & m->data[i][j];

      data[i][j] = sbox[a * 16 + b]; // row a, col b
    }
  }

  bs_mat = mat44_set(data[0], data[1], data[2], data[3]);
  return bs_mat;
}

enum : uint8_t {
  NORM,
  INV
};

Mat44* shift_rows(Mat44* m, uint8_t mode = NORM) {
  Mat44* shift = NULL;
  uint8_t data[4][4] = {{0}, {0}, {0}, {0}};
  switch (mode) {
    case NORM:
      {
        memcpy(data[0], m->data[0], sizeof(uint32_t) * 4);
        data[1][0] = m->data[1][1]; data[1][1] = m->data[1][2]; data[1][2] = m->data[1][3]; data[1][3] = m->data[1][0];
        data[2][0] = m->data[2][2]; data[2][1] = m->data[2][3]; data[2][2] = m->data[2][0]; data[2][3] = m->data[2][1];
        data[3][0] = m->data[3][3]; data[3][1] = m->data[3][0]; data[3][2] = m->data[3][1]; data[3][3] = m->data[3][2];
      }
      break;
    case INV:
      {
        memcpy(data[0], m->data[0], sizeof(uint32_t) * 4);
        data[1][0] = m->data[1][3]; data[1][1] = m->data[1][0]; data[1][2] = m->data[1][1]; data[1][3] = m->data[1][2];
        data[2][0] = m->data[2][2]; data[2][1] = m->data[2][3]; data[2][2] = m->data[2][0]; data[2][3] = m->data[2][1];
        data[3][0] = m->data[3][1]; data[3][1] = m->data[3][2]; data[3][2] = m->data[3][3]; data[3][3] = m->data[3][0];
      }
      break;
    default: // code doesn't exist
      return NULL;
  }

  shift = mat44_set(data[0], data[1], data[2], data[3]);
  return shift;
}

uint8_t* mix_col(uint8_t (&m)[4], uint8_t mode = NORM) {
  uint8_t* col = (uint8_t*)malloc(sizeof(uint8_t) * 4);

  switch (mode) {
    case NORM:
      {
        col[0] = gf_mul(m[0], 2) ^ gf_mul(m[1], 3) ^ gf_mul(m[2], 1) ^ gf_mul(m[3], 1);
        col[1] = gf_mul(m[0], 1) ^ gf_mul(m[1], 2) ^ gf_mul(m[2], 3) ^ gf_mul(m[3], 1);
        col[2] = gf_mul(m[0], 1) ^ gf_mul(m[1], 1) ^ gf_mul(m[2], 2) ^ gf_mul(m[3], 3);
        col[3] = gf_mul(m[0], 3) ^ gf_mul(m[1], 1) ^ gf_mul(m[2], 1) ^ gf_mul(m[3], 2);
      }
      break;
    case INV:
      {
        col[0] = gf_mul(m[0], 14) ^ gf_mul(m[1], 11) ^ gf_mul(m[2], 13) ^ gf_mul(m[3],  9);
        col[1] = gf_mul(m[0],  9) ^ gf_mul(m[1], 14) ^ gf_mul(m[2], 11) ^ gf_mul(m[3], 13);
        col[2] = gf_mul(m[0], 13) ^ gf_mul(m[1],  9) ^ gf_mul(m[2], 14) ^ gf_mul(m[3], 11);
        col[3] = gf_mul(m[0], 11) ^ gf_mul(m[1], 13) ^ gf_mul(m[2],  9) ^ gf_mul(m[3], 14);
      break;
      }
  }

  return col;
}

Mat44* mix_columns(Mat44* m, uint8_t mode = NORM) {
  Mat44* m_mat = NULL;

  uint8_t data[4][4] = {{0}, {0}, {0}, {0}};

  for (int i = 0; i < 4; i += 1) {
    uint8_t* col   = NULL;
    uint8_t  dat[4] = {0, 0, 0, 0};
    for (int j = 0; j < 4; j += 1) {
      dat[j] = m->data[j][i];
    }

    col = mix_col(dat, mode);
    data[0][i] = col[0];
    data[1][i] = col[1];
    data[2][i] = col[2];
    data[3][i] = col[3];

    free(col);
  }

  m_mat = mat44_set(data[0], data[1], data[2], data[3]);
  return m_mat;
}

Mat44* add_round_key(Mat44* m, Mat44* k) {
  Mat44* n = mat44_set(
    {gf_add(m->data[0][0], k->data[0][0]), gf_add(m->data[0][1], k->data[0][1]), gf_add(m->data[0][2], k->data[0][2]), gf_add(m->data[0][3], k->data[0][3])},
    {gf_add(m->data[1][0], k->data[1][0]), gf_add(m->data[1][1], k->data[1][1]), gf_add(m->data[1][2], k->data[1][2]), gf_add(m->data[1][3], k->data[1][3])},
    {gf_add(m->data[2][0], k->data[2][0]), gf_add(m->data[2][1], k->data[2][1]), gf_add(m->data[2][2], k->data[2][2]), gf_add(m->data[2][3], k->data[2][3])},
    {gf_add(m->data[3][0], k->data[3][0]), gf_add(m->data[3][1], k->data[3][1]), gf_add(m->data[3][2], k->data[3][2]), gf_add(m->data[3][3], k->data[3][3])}
  );
  return n;
}
/*
uint32_t* round_key_schedule(Mat44* k) {
  uint32_t* w = (uint32_t*)malloc(sizeof(uint32_t) * 44);

  for (uint8_t i = 0; i < 4; i += 1) {
    w[i] = (k->data[i][0] << 24) |
           (k->data[i][1] << 16) |
           (k->data[i][2] << 8)  |
           k->data[i][3];
  }

  for (uint8_t i = 4; i < 44; i += 1) {
    uint32_t tmp = w[i - 1];
    if (i % 4 == 0) {
      // rotate
      uint32_t rb =
        (0xff000000 & (tmp << 8))  |
        (0x00ff0000 & (tmp << 16)) |
        (0x0000ff00 & (tmp << 24)) |
        (0x000000ff & (tmp >> 24));

      // sub bytes
      uint32_t sb =
        sbox[(0x0f & (rb >> 28)) * 16 + (0x0f & (rb >> 24))] |
        sbox[(0x0f & (rb >> 20)) * 16 + (0x0f & (rb >> 16))] |
        sbox[(0x0f & (rb >> 12)) * 16 + (0x0f & (rb >>  8))] |
        sbox[(0x0f & (rb >>  4)) * 16 + (0x0f & rb)];

      // xor with rcon
      uint32_t rconst = *((uint32_t*)rcon + (i / 4));
      tmp = sb ^ rconst;
    }

    w[i] = w[i - 4] ^ tmp;
  }

  return w;
}
*/

Mat44* get_round_key(Mat44* key) {
  Mat44* new_k = NULL;
  uint8_t new_data[4][4] = {{0}, {0}, {0}, {0}};

  for (int k = 0; k < 4; k += 1) {
    uint8_t data1[4] = {0, 0, 0, 0};
    uint8_t data2[4] = {0, 0, 0, 0};



    if ((k + 4) % 4 == 0) {
      for (int i = 0; i < 4; i += 1) {
        data1[i] = key->data[i][0];
      }
      for (int i = 0; i < 4; i += 1) {
        data2[i] = key->data[i][3];
      }

      // rotate
      uint8_t tmp = data2[0];
      data2[0] = data2[1];
      data2[1] = data2[2];
      data2[2] = data2[3];
      data2[3] = tmp;

      // s-box
      for (int i = 0; i < 4; i += 1) {
        data2[i] = sbox[(data2[i] >> 4) * 16 + (0x0f & data2[i])];
      }

      uint8_t x = 0x01;
      data2[0] = data2[0] ^ x;

      new_data[0][0] = data1[0] ^ data2[0];
      new_data[1][0] = data1[1] ^ data2[1];
      new_data[2][0] = data1[2] ^ data2[2];
      new_data[3][0] = data1[3] ^ data2[3];
    } else {
      for (int i = 0; i < 4; i += 1) {
        data1[i] = key->data[i][k];
        data2[i] = new_data[i][k - 1];
      }

      new_data[0][k] = data1[0] ^ data2[0];
      new_data[1][k] = data1[1] ^ data2[1];
      new_data[2][k] = data1[2] ^ data2[2];
      new_data[3][k] = data1[3] ^ data2[3];
    }
  }

  new_k = mat44_set(
    new_data[0],
    new_data[1],
    new_data[2],
    new_data[3]
  );

  return new_k;
}

int main() {

  Mat44* p_mat = mat44_set({0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10, 11}, {12, 13, 14, 15});
  Mat44* k_mat = mat44_set({1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1});

  std::cout << "Original State :: \n";
  mat44_print(p_mat);

  //uint32_t* keys = round_key_schedule(k_mat);

  Mat44* ark0 = add_round_key(p_mat, k_mat);
  std::cout << "State after initial AddRoundKey :: \n";
  mat44_print(ark0);

  Mat44* sb = sub_byte(ark0);
  std::cout << "State after SubByte :: \n";
  mat44_print(sb);

  Mat44* sr = shift_rows(sb);
  std::cout << "State after ShiftRows :: \n";
  mat44_print(sr);

  Mat44* mc = mix_columns(sr);
  std::cout << "State after MixColumns :: \n";
  mat44_print(mc);

  // get next round key
  /*
  Mat44* new_k_mat = mat44_set(
    {(uint8_t)(0xff & (keys[4] >> 24)), (uint8_t)(0xff & (keys[4] >> 16)), (uint8_t)(0xff & (keys[4] >> 8)), (uint8_t)(0xff & keys[4])},
    {(uint8_t)(0xff & (keys[5] >> 24)), (uint8_t)(0xff & (keys[5] >> 16)), (uint8_t)(0xff & (keys[5] >> 8)), (uint8_t)(0xff & keys[5])},
    {(uint8_t)(0xff & (keys[6] >> 24)), (uint8_t)(0xff & (keys[6] >> 16)), (uint8_t)(0xff & (keys[6] >> 8)), (uint8_t)(0xff & keys[6])},
    {(uint8_t)(0xff & (keys[7] >> 24)), (uint8_t)(0xff & (keys[7] >> 16)), (uint8_t)(0xff & (keys[7] >> 8)), (uint8_t)(0xff & keys[7])}
  );
  */
  Mat44* new_k_mat = get_round_key(k_mat);
  std::cout << "K[4], K[5], K[6], K[7] :: \n";
  mat44_print(new_k_mat);

  Mat44* ark1 = add_round_key(mc, new_k_mat);
  std::cout << "State after AddRoundKey :: \n";
  mat44_print(ark1);

  std::cout << "Key :: \n";
  mat44_print(k_mat);

  return 0;
}
